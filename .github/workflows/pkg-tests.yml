name: "Run a package test suite"

on:
  workflow_call:
    inputs:
      container:
        required: true
        type: string

jobs:
  # extract:
  #   name: "Get package names"
  #   runs-on: ubuntu-latest
  #   container: ghcr.io/gap-system/gap-docker-${{ inputs.container }}:master
  #   outputs:
  #     matrix: ${{ steps.get-names.outputs.matrix }}
  #     container: ${{ inputs.container }}
  #   steps:
  #     # FIXME: Awful! This should be completely redone to use the package distro
  #     - name: "Get the list of package names"
  #       id: get-names
  #       run: |
  #         cd ${GAP_HOME}/pkg
  #         MATRIX='{"package":['
  #         for PKG in `ls */PackageInfo.g | cut -d'/' -f1 | cut -d'-' -f1 | tr '[:upper:]' '[:lower:]' | sort`; do
  #           echo "${PKG}"
  #           MATRIX="${MATRIX}\"${PKG}\","
  #         done
  #         MATRIX="${MATRIX}]}"
  #         MATRIX='{"package":["4ti2interface","ace","aclib","agt"]}'
  #         echo "::set-output name=matrix::$MATRIX"
  #
  # individual-package:
  #   name: "${{ matrix.package }}"
  #   needs: extract
  #   runs-on: ubuntu-18.04
  #   strategy:
  #     fail-fast: false
  #     matrix: ${{ fromJSON(needs.extract.outputs.matrix) }}
  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: "Get the Docker container URL"
  #       id: container
  #       run: echo "::set-output name=url::ghcr.io/gap-system/gap-docker-${{ needs.extract.outputs.container }}:master"

  #     - run: docker pull ${{ steps.container.outputs.url }}

  #     - name: "Run ${{ matrix.package }}'s tests in the container with GAP ${{ needs.extract.outputs.container }}"
  #       timeout-minutes: 20
  #       run: >
  #         docker run
  #         -v $PWD:/home/workspace
  #         ${{ steps.container.outputs.url }}
  #         /bin/sh -c "PKG_NAME=${{ matrix.package }} /home/workspace/pkg-tests.sh"

  #     - name: "Get job status"
  #       id: job-status
  #       if: always()
  #       run: |
  #         PKG="${{ matrix.package }}"
  #         STATUS="${{ job.status }}"
  #         echo ${STATUS} > "${PKG}.txt"

  #     - name: "Upload job status"
  #       uses: actions/upload-artifact@v2
  #       if: always()
  #       with:
  #         name: ${{ matrix.package }}
  #         path: "${{ matrix.package }}.txt"

  extract:
    name: "Get package names"
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.get-names.outputs.matrix }}
      container: ${{ inputs.container }}
    steps:
      - name: "Get the list of package names"
        id: get-names
        run: |
          MATRIX='{"package":["4ti2interface","ace","aclib","agt"]}'
          echo "::set-output name=matrix::$MATRIX"

  individual-package:
    name: "${{ matrix.package }}"
    needs: extract
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.extract.outputs.matrix) }}
    steps:
      - name: "Debugging Report Script"
        id: debugging
        run: |
          PKG="${{ matrix.package }}"
          case $PKG in
            aclib|agt
              exit 0
            ;;
            *)
              exit 1
          esac

  report:
    name: "Report"
    needs: individual-package
    if: always()
    runs-on: ubuntu-18.04
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_REPOSITORY: ${{ github.repository }}
    steps:
      - uses: actions/checkout@v2

      - name: "Create data worktree"
        run: |
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}
          git fetch
          git branch --track data origin/data
          git worktree add data origin/data

      - name: "Download every job status"
        uses: actions/download-artifact@v2
        with:
          path: reports

      - name: "Set up Python 3.7"
        uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: "Generate report"
        id: report
        run: python pkg-report.py ${{inputs.container}} $(git rev-parse --short "$GITHUB_SHA") ${GITHUB_REF#refs/heads/}

      - name: "Push report to data"
        id: push-report
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'
          cd data
          git add -A
          git commit -m "Automated report"
          git push origin HEAD:data
